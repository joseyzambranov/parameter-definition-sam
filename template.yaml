AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Typescript aws lambda template

########################################################################
# Parameters
#
# Parameters provided during the deployement of the template. 
# Can be used to create env vars
# Can be referenced at any point with !Ref <par_name> or !Sub "${<par_name>}other words"
# See the samconfig.toml file
########################################################################
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: App Profile
        Parameters:
          - ENV
          - COID
          - APID
          - ASSETID
          - SID
      - Label:
          default: Configuracion S3
        Parameters:
          - S3BucketName
          - NameBucket

#Parameters:
#  token:
#    Type: String
#    Description: useful token for the application
#  apiStage:
#    Type: String
#    Description: stage used to deploy the API
#    Default: dev
Parameters:
  ##### NOMENCLATURA CSTI CORP ####
  #################################
  ENV:
    Description: Environment
    Type: String
    AllowedValues: ['PRD','QAS','DEV','TST']
    Default: DEV
  ASSETID:
    Type: String
    Description: Identificador único en la empresa por Proyecto o global (formado por cuatro dígitos).  
    Default: '0001'
  APID:
    Type: String
    Description: Código de empresa para representar el software, en este caso es un software para "Sistema de Notificaciones", por lo que se seleccionó SCSN (Sinapsis Corp Sistema de Notificaciones)   
    Default: 'SCSN'
  SID:
    Type: String
    Description: Tres letras que representan el entorno, una de estas letras debe representar (Q=QAS, D=DEV, P=PRD etc.), otras dos letras representan la aplicación
    Default: 'SND'    
  COID:
    Type: String
    Description: Código de la empresa (cuatro letras representativas) en este caso se consideró SINC
    Default: 'SINC'
  S3BucketName:
    Description: Bucket para alojar las bases
    Type: String
    Default: 'sinc-0001-scsn-snd-s3-00'
  NameBucket:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
    Description: Ingrese el nombre del bucket para el front
    Default: 'sinc-0001-scsn-snd-s3-01'
  token:
    Type: String
    Description: useful token for the application
  apiStage:
    Type: String
    Description: stage used to deploy the API
    Default: DEV  

########################################################################
# Globals
#
# Settings in common with all the lambda functions
# Can be specified individually for each one in the "Properties" section
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
########################################################################
Globals:
  Function:
    # Max timeont before returning an error
    Timeout: 100
    # The runtime will be node 14
    Runtime: nodejs14.x
    # Main file used to start the application
    # It is in the form <file_name>.<handler_function>
    Handler: app.handler
    # Layer shared between the functions
    Layers:
      - !Ref MyLayer
    # Environment variables accessible through "process.env.<name>"
    Environment:
      Variables:
        TOKEN: !Ref token

########################################################################
# Resources
#
# List of AWS resources that will be created and deployed
########################################################################
Resources:
  # Simple API gateway
  MyFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${COID}-${ASSETID}-${APID}-${SID}-AG-00"
      StageName: !Ref apiStage

  # First of the 2 functions
  MyFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt MyLambdaFunctionRole.Arn 
      #FunctionName: my-function
      FunctionName: !Sub '${COID}-${ASSETID}-${APID}-${SID}-LA-00-my-function'
      # Folder path that contains the file specified in the "handler" (see globals)
      # Use "dist" instead of "src", since it needs to point to the compiled ".js" files
      CodeUri: ./dist/myFunction
      Architectures:
        - arm64
      Events:
        MyFunctionApi:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: Api
          Properties:
            Path: /func
            Method: get
            # Reference to the API Gateway resource created before
            RestApiId: !Ref MyFunctionApi

  # Second of the 2 functions
  MyFunction2:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt MyLambdaFunctionRole.Arn 
      #FunctionName: my-function-2
      FunctionName: !Sub '${COID}-${ASSETID}-${APID}-${SID}-LA-00-my-function-2'
      # Folder path that contains the file specified in the "handler" (see globals)
      # Use "dist" instead of "src", since it needs to point to the compiled ".js" files
      CodeUri: ./dist/MyFunction2
      Architectures:
        - arm64
      Events:
        MyFunctionApi:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: Api
          Properties:
            Path: /func2
            Method: get
            # Reference to the API Gateway resource created before
            RestApiId: !Ref MyFunctionApi

  # Layer containing the dependencies and some utilities shared between functions
  MyLayer:
    # More info about Layer resources: https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesslayerversion
    Type: AWS::Serverless::LayerVersion
    Properties:
      #LayerName: my-function-dependencies
      LayerName: !Sub '${COID}-${ASSETID}-${APID}-${SID}-LA-00-my-function-dependencies'
      # Folder path that contains the package.json file shared among the other functions
      # Use "dist" instead of "src", since it needs to point to the compiled ".js" files
      Description: Dependencies for my-function and my-function-2
      ContentUri: ./dist/myLayer
      CompatibleRuntimes:
        - nodejs14.x
      CompatibleArchitectures:
        - arm64  
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
    # Important to allow sam to build the layer and take advantage of sam's dependecy caching
    Metadata:
      BuildMethod: nodejs14.x
  MyLambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${COID}-${ASSETID}-${APID}-${SID}-LA-00_Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${COID}-${ASSETID}-${APID}-${SID}-LA-00_Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action:
                  - s3:DeleteObject*
                  - s3:GetObject*
                  - s3:PutObject*
                  - lambda:*
                  - cloudwatch:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:UpdateItem
                  - sqs:*
                Resource: "*"
########################################################################
# Outputs
#
# Useful outputs produced by the deployement of the stack
# Can be fully customized
########################################################################
Outputs:
  MyFunctionApi:
    Description: "API Gateway endpoint URL for ${apiStage} stage for MyFunction"
    Value: !Sub "https://${MyFunctionApi}.execute-api.${AWS::Region}.amazonaws.com/${apiStage}/func"
  MyFunction2Api:
    Description: "API Gateway endpoint URL for ${apiStage} stage for MyFunction"
    Value: !Sub "https://${MyFunctionApi}.execute-api.${AWS::Region}.amazonaws.com/${apiStage}/func2"
